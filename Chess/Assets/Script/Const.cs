using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Const : MonoBehaviour {

	public int [,] Pawn = {
        {9,  9,  9, 11, 13, 11,  9,  9,  9, 0, 0},
        {19, 24, 34, 42, 44, 42, 34, 24, 19, 0, 0},
        {19, 24, 32, 37, 37, 37, 32, 24, 19, 0, 0},
        {19, 23, 27, 29, 30, 29, 27, 23, 19, 0, 0},
        {14, 18, 20, 27, 29, 27, 20, 18, 14, 0, 0},
        {7, 0, 13, 0, 16,  0, 13,  0,  7, 0, 0},
        {7, 0, 7, 0, 15, 0, 7, 0,  7, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    };
    public int [,] King = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 6001, 6001, 6001, 0, 0, 0, 0, 0},
        {0, 0, 0, 6002, 6002, 6002, 0, 0, 0, 0, 0},
        {0, 0, 0, 6011, 6015, 6011, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    }; //2
    public int [,] Advisor = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 20, 0, 20, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 20, 0, 20, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    }; //3
    public int[,] Elephant = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {18, 0, 0, 0, 23, 0, 0, 0, 18, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    };//4
    public int[,] Horse = {
        {90, 90, 90, 96, 90, 96, 90, 90, 90, 0, 0},
        {90, 96,103, 97, 94, 97,103, 96, 90, 0, 0},
        {92, 98, 99,103, 99,103, 99, 98, 92, 0, 0},
        {93,108,100,107,100,107,100,108, 93, 0, 0},
        {90,100, 99,103,104,103, 99,100, 90, 0, 0},
        {90, 98,101,102,103,102,101, 98, 90, 0, 0},
        {92, 94, 98, 95, 98, 95, 98, 94, 92, 0, 0},
        {93, 92, 94, 95, 92, 95, 94, 92, 93, 0, 0},
        {85, 90, 92, 93, 78, 93, 92, 90, 85, 0, 0},
        {88, 85, 90, 88, 90, 88, 90, 85, 88, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    };//5
    public int[,] Rook = {
        {206,208,207,213,214,213,207,208,206, 0, 0},
        {206,212,209,216,233,216,209,212,206, 0, 0},
        {206,208,207,214,216,214,207,208,206, 0, 0},
        {206,213,213,216,216,216,213,213,206, 0, 0},
        {208,211,211,214,215,214,211,211,208, 0, 0},
        {208,212,212,214,215,214,212,212,208, 0, 0},
        {204,209,204,212,214,212,204,209,204, 0, 0},
        {198,208,204,212,212,212,204,208,198, 0, 0},
        {200,208,206,212,200,212,206,208,200, 0, 0},
        {194,206,204,212,200,212,204,206,194, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    }; //6
    public int[,] Cannon = {
        {100,100, 96, 91, 90, 91, 96,100,100, 0, 0},
        {98, 98, 96, 92, 89, 92, 96, 98, 98, 0, 0},
        {97, 97, 96, 91, 92, 91, 96, 97, 97, 0, 0},
        {96, 99, 99, 98,100, 98, 99, 99, 96, 0, 0},
        {96, 96, 96, 96,100, 96, 96, 96, 96, 0, 0},
        {95, 96, 99, 96,100, 96, 99, 96, 95, 0, 0},
        {96, 96, 96, 96, 96, 96, 96, 96, 96, 0, 0},
        {97, 96,100, 99,101, 99,100, 96, 97, 0, 0},
        {96, 97, 98, 98, 98, 98, 98, 97, 96, 0, 0},
        {96, 96, 97, 99, 99, 99, 97, 96, 96, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    }; //7
    public int ValueState(int[,] state, bool maximizingPlayer)
    {
        var val = 0;
        // quân đen
        var have_king = false;
        if (maximizingPlayer)
        {
            for(int i = 0; i < 11; i++)
            {
                for (int j = 0; j < 11; j++ )
                {
                    
                    if (state[i,j] == 8)
                    {
                        val = val + Pawn[10 - i,10 - j];
                    }
                    if (state[i, j] == 9)
                    {
                        val = val + King[10 - i, 10 - j];
                    }
                    if (state[i, j] == 10)
                    {
                        val = val + Advisor[10 - i, 10 - j];
                    }
                    if (state[i, j] == 11)
                    {
                        val = val + Elephant[10 - i, 10 - j];
                    }
                    if (state[i, j] == 12)
                    {
                        val = val + Horse[10 - i, 10 - j];
                    }
                    if (state[i, j] == 13)
                    {
                        val = val + Rook[10 - i, 10 - j];
                    }
                    if (state[i, j] == 14)
                    {
                        val = val + Cannon[10 - i, 10 - j];
                    }
                    if (state[i,j] == 2)
                    {
                        have_king = true;
                    }
                }
            }
        }
        else // quân đỏ
        {
            for (int i = 0; i < 11; i++)
            {
                for (int j = 0; j < 11; j++)
                {

                    if (state[i, j] == 1)
                    {
                        val = val + Pawn[i,j];
                    }
                    if (state[i, j] == 2)
                    {
                        val = val + King[i, j];
                    }
                    if (state[i, j] == 3)
                    {
                        val = val + Advisor[i, j];
                    }
                    if (state[i, j] == 4)
                    {
                        val = val + Elephant[i, j];
                    }
                    if (state[i, j] == 5)
                    {
                        val = val + Horse[i, j];
                    }
                    if (state[i, j] == 6)
                    {
                        val = val + Rook[i, j];
                    }
                    if (state[i, j] == 7)
                    {
                        val = val + Cannon[i, j];
                    }
                    if (state[i,j] == 9)
                    {
                        have_king = true;
                    }
                }
            }
        }
        if (!have_king)
        {
            return 10000;
        }

        return val;
    }
}
